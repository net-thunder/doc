import{_ as t,c as a,a0 as r,o}from"./chunks/framework.nOBYma8F.js";const p="/assets/mind2.BAyvs81R.jpeg",T=JSON.parse('{"title":"技术原理","description":"","frontmatter":{},"headers":[],"relativePath":"doc/theory.md","filePath":"doc/theory.md"}'),s={name:"doc/theory.md"};function N(n,e,c,d,i,l){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="技术原理" tabindex="-1">技术原理 <a class="header-anchor" href="#技术原理" aria-label="Permalink to &quot;技术原理&quot;">​</a></h1><p><img src="'+p+'" alt="画板"></p><p>SD-WAN（Software-Defined Wide Area Network）中使用的TUN设备是一种虚拟网络设备，它允许将数据包从一个物理网络接口路由到另一个网络接口，通常用于创建安全的隧道，实现加密、隔离和路由功能。以下是SD-WAN中使用的TUN设备的工作原理：</p><p>虚拟TUN设备创建： SD-WAN控制器或设备会在操作系统内核中创建一个虚拟的TUN/TAP（Tunnel）设备。TUN代表网络层（Layer 3）设备，而TAP代表数据链路层（Layer 2）设备。</p><p>路由规则配置： SD-WAN系统会配置一组路由规则，这些规则定义了数据包如何在物理接口和TUN设备之间路由。这些规则可能基于目的地IP地址、子网、端口等条件。</p><p>隧道加密： 数据包被发送到TUN设备时，它们可能需要加密以确保安全传输。这通常涉及使用加密协议（例如IPsec）来将数据包加密为隧道内的安全数据。</p><p>TUN设备中转： 数据包被写入TUN设备后，它们被传输到SD-WAN设备内核的虚拟网络栈。从那里，它们可以根据路由规则进行进一步处理。</p><p>路由和策略： SD-WAN设备内核中的路由和策略引擎将决定如何处理数据包。这可能包括决定是否将数据包传输到其他网络接口，进行加速、压缩、分流或其他网络优化操作。</p><p>数据包传输： 数据包可能被进一步路由到物理接口以达到其最终目的地。这可能是通过WAN链路或其他网络连接。</p><p>反向操作： 在接收到远程站点的响应数据包后，SD-WAN设备将数据包写入TUN设备，然后通过TUN设备发送回到本地站点。这包括解密数据（如果已加密），然后通过本地网络栈路由。</p><p>总的来说，SD-WAN中使用的TUN设备充当了虚拟隧道接口，通过它，数据包可以被加密、路由和传输，从而实现了SD-WAN的核心功能，如安全连接、流量管理和优化。这种虚拟化网络设备的使用允许SD-WAN系统更灵活地管理和优化网络流量，提供更好的性能和安全性。</p>',11)]))}const m=t(s,[["render",N]]);export{T as __pageData,m as default};
